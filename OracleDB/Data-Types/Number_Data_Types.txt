There are many data types that can be used to store number values in Oracle. While you can store numbers in text-based data types 
such as VARCHAR2, it’s better to use number data types if you’re storing just numbers because

a.  You can perform arithmetic operations on them
b.  You can round them to a different number of decimal places
c.  You can aggregate them using sum, average, and other features


NUMBER:
NUMBER data type in Oracle is used to store numbers
It can store either whole numbers or decimal numbers, positive or negative numbers. The range of a value stored as a NUMBER data 
type is from -9 × 10^125 to 9 × 10^125, which means numbers that areabout 125 digits, positive or negative

When you define a NUMBER data type, you can define two things: a precision and a scale
    a.  Precision is the total number of digits in the number
    b.  Scale is the number of digits to the right of the decimal point.

Using different combinations of values for precision and scale allows you to store positive and negative decimals and whole numbers.

You can define a NUMBER data type by specifying the precision and scale insidebrackets (p stands for precision, s stands for scale):

NUMBER(p, s)

Example:
To define a number that has ten total digits, with three decimal places, you would write this
NUMBER(10, 3)



INTEGER:
INTEGER data type is an SQL standard data type, which means it is in all SQL databases. However, in Oracle, it’s the same as 
defining a NUMBER(38) data type, which is a NUMBER with 38 digits and 0 decimal places.
Because the INTEGER data type is actually translated to a NUMBER(38) data type, it’s better to use NUMBER. It allows you more 
freedom with the size of the value, if you don’t want a 38-digit number.


FLOAT:
Oracle includes a FLOAT data type, which is an ANSI standard data type (meaning it is available in all types of SQL). However, 
just like INTEGER, the FLOAT data type is translated internally by the Oracle database to NUMBER
So, rather than using the FLOAT data type, which is translated to NUMBER, its better to use the NUMBER.


DECIMAL:
Just like the FLOAT data type, Oracle includes a DECIMAL data type that is also an ANSI standard data type. It’s also translated 
to a NUMBER data type by the Oracle database.


BINARY_FLOAT:
The BINARY_FLOAT data type is used for storing floating-point numbers, which are numbers that contain decimal places. It’s similar 
to “float” data types in other programming languages. This has 32-bit precision

There are a few differences between BINARY_FLOAT and the NUMBER data type:

    a.  BINARY_FLOAT can often perform arithmetic calculations faster than NUMBER
    b.  BINARY_FLOAT is often smaller to store than NUMBER
    c.  BINARY_FLOAT is an approximate definition, where NUMBER is an exact definition

Note:- When a BINARY_FLOAT value is stored, an approximate value is stored. This can cause rounding issues if you’re using many calculations on this number. However, it’s good 
for storing large decimal or floating-point numbers.


BINARY_DOUBLE:
BINARY_DOUBLE data type is very similar to the BINARY_FLOAT data type:
    a.  They both store floating-point numbers.
    b.  They both store numbers in an approximate way, rather than the exact way that NUMBER does

However, BINARY_FLOAT is a 32-bit precision value and BINARY_DOUBLE is a 64-bit precision value. This means it can store many more decimal places than BINARY_FLOAT. 
If you need to store a large decimal number, and BINARY_FLOAT cannot handle it, then BINARY_DOUBLE may be a good option